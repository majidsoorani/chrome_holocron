// Data from https://github.com/Ilia-Abolhasani/iran-geo-ip/blob/main/ir-ip.txt
// Last updated: 2024-05-10
export const IRAN_IP_RANGES_CIDR = [
    "2.176.0.0/13",
    "2.184.0.0/13",
    "5.52.192.0/20",
    "5.56.0.0/15",
    "5.63.12.0/22",
    "5.112.0.0/13",
    "5.120.0.0/14",
    "5.124.0.0/15",
    "5.126.0.0/16",
    "5.144.0.0/14",
    "5.160.0.0/13",
    "5.200.128.0/17",
    "5.208.224.0/19",
    "5.216.96.0/19",
    "5.232.0.0/14",
    "5.236.0.0/15",
    "5.238.0.0/16",
    "31.24.224.0/19",
    "31.56.0.0/16",
    "37.32.0.0/16",
    "37.152.160.0/19",
    "37.255.224.0/19",
    "46.32.32.0/19",
    "46.209.0.0/16",
    "46.224.0.0/14",
    "62.3.32.0/19",
    "62.60.128.0/18",
    "62.99.128.0/17",
    "62.193.0.0/18",
    "62.220.96.0/19",
    "77.36.160.0/19",
    "77.77.64.0/19",
    "77.104.64.0/19",
    "77.238.96.0/19",
    "78.38.0.0/15",
    "78.109.128.0/18",
    "79.127.120.0/21",
    "79.132.208.0/20",
    "79.175.128.0/17",
    "80.69.128.0/18",
    "80.71.64.0/19",
    "80.75.0.0/18",
    "80.191.0.0/16",
    "81.12.0.0/17",
    "81.28.0.0/18",
    "81.31.160.0/19",
    "81.90.144.0/20",
    "81.91.128.0/19",
    "82.99.192.0/18",
    "82.102.0.0/19",
    "83.123.192.0/18",
    "84.47.128.0/17",
    "84.241.0.0/18",
    "85.9.64.0/18",
    "85.15.0.0/16",
    "85.133.128.0/18",
    "85.185.0.0/16",
    "86.57.0.0/17",
    "87.107.0.0/17",
    "87.236.192.0/18",
    "87.247.160.0/19",
    "88.135.32.0/19",
    "89.32.240.0/20",
    "89.42.208.0/20",
    "89.45.0.0/18",
    "89.45.64.0/19",
    "89.144.192.0/18",
    "89.165.0.0/17",
    "89.187.160.0/19",
    "89.198.96.0/19",
    "89.221.96.0/19",
    "91.92.0.0/14",
    "91.98.0.0/15",
    "91.108.4.0/22",
    "91.241.44.0/22",
    "92.42.48.0/20",
    "92.50.0.0/16",
    "92.60.0.0/16",
    "92.244.128.0/17",
    "93.113.0.0/18",
    "93.114.0.0/15",
    "93.116.0.0/14",
    "93.126.0.0/16",
    "94.74.128.0/17",
    "94.101.128.0/18",
    "94.139.160.0/19",
    "94.182.0.0/15",
    "94.242.192.0/18",
    "95.38.0.0/17",
    "95.82.0.0/16",
    "95.106.128.0/17",
    "95.140.160.0/19",
    "95.156.224.0/19",
    "95.215.0.0/17",
    "109.73.0.0/18",
    "109.109.0.0/19",
    "109.122.128.0/17",
    "109.125.128.0/17",
    "109.169.0.0/16",
    "109.202.0.0/16",
    "109.225.0.0/16",
    "130.185.64.0/18",
    "151.232.0.0/13",
    "158.58.128.0/17",
    "176.65.192.0/18",
    "178.63.32.0/19",
    "178.131.0.0/17",
    "178.252.160.0/19",
    "185.4.40.0/22",
    "185.5.248.0/22",
    "185.9.144.0/22",
    "185.13.112.0/22",
    "185.15.44.0/22",
    "185.24.88.0/22",
    "185.37.28.0/22",
    "185.39.192.0/22",
    "185.43.220.0/22",
    "185.44.208.0/22",
    "185.46.212.0/22",
    "185.47.20.0/22",
    "185.49.84.0/22",
    "185.49.140.0/22",
    "185.50.100.0/22",
    "185.51.204.0/22",
    "185.53.144.0/22",
    "185.55.184.0/22",
    "185.60.140.0/22",
    "185.69.144.0/22",
    "185.69.152.0/22",
    "185.80.188.0/22",
    "185.81.96.0/22",
    "185.86.148.0/22",
    "185.94.96.0/22",
    "185.97.68.0/22",
    "185.105.240.0/22",
    "185.129.188.0/22",
    "185.143.232.0/22",
    "185.146.172.0/22",
    "185.163.244.0/22",
    "185.181.8.0/22",
    "185.198.12.0/22",
    "185.205.208.0/22",
    "185.210.140.0/22",
    "185.213.164.0/22",
    "185.229.20.0/22",
    "185.231.112.0/22",
    "185.233.108.0/22",
    "185.255.188.0/22",
    "193.104.34.0/23",
    "193.189.122.0/23",
    "194.5.196.0/22",
    "194.33.188.0/22",
    "194.104.128.0/19",
    "195.146.32.0/19",
    "195.181.160.0/20",
    "195.248.224.0/19",
    "212.33.192.0/18",
    "213.108.224.0/19",
    "213.233.160.0/19",
    "217.218.0.0/15"
];

/**
 * Pre-calculates IP ranges with their netmasks for use in a PAC script.
 * @type {Array<[string, string]>}
 */
export const IRAN_IP_RANGES_NETMASK = IRAN_IP_RANGES_CIDR.map(cidr => {
    const [ip, maskStr] = cidr.split('/');
    const mask = parseInt(maskStr, 10);
    // This should not happen with valid data, but as a safeguard:
    if (isNaN(mask) || mask < 0 || mask > 32) {
        return null;
    }
    // Create a 32-bit binary string for the mask
    const maskBin = '1'.repeat(mask) + '0'.repeat(32 - mask);
    const octets = [];
    for (let i = 0; i < 4; i++) {
        octets.push(parseInt(maskBin.substring(i * 8, (i + 1) * 8), 2));
    }
    return [ip, octets.join('.')];
}).filter(Boolean); // Filter out any null entries from invalid CIDR